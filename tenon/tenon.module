<?php

// URL to Tenon.io API.
define('TENON_IO_API_URL', 'https://tenon.io/api/');

// Importance criteria.
define('TENON_IMPORTANCE_NONE', 0);
define('TENON_IMPORTANCE_LOW', 1);
define('TENON_IMPORTANCE_MEDIUM', 2);
define('TENON_IMPORTANCE_HIGH', 3);

// Headless browser default viewport dimensions.
define('TENON_VIEWPORT_DEFAULT_HEIGHT', 768);
define('TENON_VIEWPORT_DEFAULT_WIDTH', 1024);

/**
 * Implements hook_menu().
 */
function tenon_menu() {
  return array(
    'admin/config/user-interface/tenon' => array(
      'title' => 'Tenon.io settings',
      'description' => 'Administer Tenon.io API connection settings.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tenon_admin_settings_form'),
      'access arguments' => array('administer tenon settings'),
      'file' => 'tenon.admin.inc',
    ),
    'tenon/page' => array(
      'title' => 'Page report',
      'page callback' => 'tenon_trigger_page_report',
      'access arguments' => array('tenon trigger page report'),
      'file' => 'tenon.admin.inc',
    ),
// @TODO: Enable once the endpoint is created.
    'tenon/spider' => array(
      'title' => 'Spider report',
      'page callback' => 'tenon_trigger_spider_report',
//      'access arguments' => array('tenon trigger spider report'),
      'access callback' => FALSE,
      'file' => 'tenon.admin.inc',
    ),
    'tenon/ajax/page' => array(
      'title' => 'Ajax test',
      'delivery callback' => 'ajax_deliver',
      'page callback' => 'tenon_trigger_ajax_page_report',
      'access arguments' => array('tenon trigger page report'),
      'file' => 'tenon.admin.inc',
    ),
  );
}

/**
 * Implements hook_cp_toolbar_pre_render_alter().
 */
function tenon_cp_toolbar_pre_render_alter(&$toolbar) {
  // Build the new Tenon menu entry.
  $l_page = menu_get_item('tenon/page');
  $l_spider = menu_get_item('tenon/spider');

  // Display the toolbar menu if the user can access a page.
  if ($l_page['access'] || $l_spider['access']) {
    // Extract the potential existing report count from cache.
    $tested_url = url(current_path(), array('absolute' => TRUE));
    $url_hash = md5($tested_url);
    $issues_count_cache = cache_get('tenon_' . $url_hash);
    if ($issues_count_cache) {
      $issues_count_cache = $issues_count_cache->data;
    }

    // Attach a JS & CSS file.
    $settings = array(
      'key'             => variable_get('tenon_api_key', NULL),
      'url'             => $tested_url,
      'appId'           => variable_get('tenon_app_id', ''),
      'projectID'       => variable_get('tenon_project_id', ''),
      'certainty'       => variable_get('tenon_certainty', 0),
      'importance'      => variable_get('tenon_importance', 0),
      'level'           => variable_get('tenon_level', 'AAA'),
      'priority'        => variable_get('tenon_priority', 0),
      'ref'             => variable_get('tenon_ref_information', TRUE),
      'store'           => TRUE,
      'uaString'        => variable_get('tenon_ua_string', ''),
      'viewPortHeight'  => variable_get('tenon_viewport_height', TENON_VIEWPORT_DEFAULT_HEIGHT),
      'viewPortWidth'   => variable_get('tenon_viewport_width', TENON_VIEWPORT_DEFAULT_WIDTH),
      'moduleBasePath'  => base_path() . drupal_get_path('module', 'tenon'),
      'issuesCount'     => $issues_count_cache,
      'cleanUrl'        => variable_get('clean_url', FALSE),
    );
    $toolbar['#attached']['css'][] = drupal_get_path('module', 'tenon') . '/tenon.css';
    $toolbar['#attached']['js'][] = drupal_get_path('module', 'tenon') . '/tenon.js';
    $toolbar['#attached']['js'][] = array('type' => 'setting', 'data' => array('tenon' => $settings));
    $toolbar['#attached']['library'][] = array('os_tour', 'hopscotch');

    $toolbar['toolbar_left']['toolbar_menu']['#links']['tenon'] = array(
      'title' => '<span class="tenon-link">' . t('Accessibility Check') . '</span>',
      'href' => ($l_page['access']) ? 'tenon/page' : 'tenon/spider',
      'html' => TRUE,
      '#paths' => array(),
      'attributes' => array(
        'data-tooltip' => 'Tenon.io actions.',
        'data-drawer' => 'tenon-drawer',
      ),
    );

    // Build the children links.
    $links = array();
    if ($l_page['access']) {
      $tested_url = url(current_path(), array('absolute' => TRUE));
      $l_page['query'] = array('url' => $tested_url);
      $l_page['attributes']['data-tenon'] = 'page_report';
      $links['tenon/page'] = $l_page;
    }
    if ($l_spider['access']) {
      $links['tenon/spider'] = $l_spider;
    }
    $toolbar['toolbar_drawer']['tenon-drawer'] = array(
      '#theme' => 'cp_toolbar_drawer_section',
      '#attributes' => array('id' => 'tenon-drawer'),
      '#paths' => array(
        'tenon',
      ),
      'manage' => array(
        '#theme' => 'links',
        '#links' => $links,
        '#attributes' => array(
          'class' => 'toolbar-gear',
        ),
      ),
    );
  }
}

/**
 * Implements hook_permission().
 */
function tenon_permission() {
  return array(
    'administer tenon settings' => array(
      'title' => 'Administer Tenon.io settings',
      'description' => 'Authorize users to configure the Tenon.io API settings.'
    ),
    'tenon trigger page report' => array(
      'title' => 'Trigger page report',
      'description' => 'Authorize the user to trigger a report from Tenon.io for the current page he browses.'
    ),
    'tenon trigger spider report' => array(
      'title' => 'Administer Tenon.io settings',
      'description' => 'Authorize the user to trigger a site spider report from Tenon.io.'
    ),
  );
}

/**
 * Implements hook_theme().
 */
function tenon_theme($existing, $type, $theme, $path) {
  return array(
    'tenon_results_report_full' => array(
      'variables' => array(
        'report_url' => '',
        'error_count' => 0,
        'warning_count' => 0,
        'issues_count' => 0,
        'level_a' => 0,
        'percent_a' => 0,
        'level_aa' => 0,
        'percent_aa' => 0,
        'level_aaa' => 0,
        'percent_aaa' => 0,
      ),
      'template' => 'tenon-report-full',
    ),
    'tenon_results_report_summary' => array(
      'variables' => array(
        'error_count' => 0,
        'warning_count' => 0,
        'issues_count' => 0,
      ),
      'template' => 'tenon-report-summary',
    ),
  );
}

/**
 * Implements hook_admin_menu_output_alter().
 */
function tenon_admin_menu_output_alter(&$content) {
  // Add the Tenon.io menu entry if the user can access this page report.
  $page_test = menu_get_item('tenon/page');
  if ($page_test['access']) {
    $page_url = url(current_path(), array('absolute' => TRUE));
    $content['icon']['icon']['tenon'] = array(
      '#title' => t('Tenon.io page report'),
      '#weight' => 1,
      '#access' => $page_test['access'],
      '#href' => 'tenon/page',
      '#options' => array(
        'query' => array('url' => $page_url),
      ),
    );
  }
}

/**
 * Implements hook_page_alter().
 */
function tenon_page_alter(&$page) {
  if (module_exists('toolbar') && libraries_load('hopscotch')) {
    // Extract the potential existing report count from cache.
    $tested_url = url(current_path(), array('absolute' => TRUE));
    $url_hash = md5($tested_url);
    $issues_count_cache = cache_get('tenon_' . $url_hash);
    if ($issues_count_cache) {
      $issues_count_cache = $issues_count_cache->data;
    }

    // Attach a JS & CSS file.
    $settings = array(
      'key'             => variable_get('tenon_api_key', NULL),
      'url'             => $tested_url,
      'appId'           => variable_get('tenon_app_id', ''),
      'projectID'       => variable_get('tenon_project_id', ''),
      'certainty'       => variable_get('tenon_certainty', 0),
      'importance'      => variable_get('tenon_importance', 0),
      'level'           => variable_get('tenon_level', 'AAA'),
      'priority'        => variable_get('tenon_priority', 0),
      'ref'             => variable_get('tenon_ref_information', TRUE),
      'store'           => TRUE,
      'uaString'        => variable_get('tenon_ua_string', ''),
      'viewPortHeight'  => variable_get('tenon_viewport_height', TENON_VIEWPORT_DEFAULT_HEIGHT),
      'viewPortWidth'   => variable_get('tenon_viewport_width', TENON_VIEWPORT_DEFAULT_WIDTH),
      'moduleBasePath'  => base_path() . drupal_get_path('module', 'tenon'),
      'issuesCount'     => $issues_count_cache,
      'cleanUrl'        => variable_get('clean_url', FALSE),
    );
    $page['page_bottom']['#attached']['js'][] = array('type' => 'setting', 'data' => array('tenon' => $settings));
    $page['page_bottom']['#attached']['css'][] = drupal_get_path('module', 'tenon') . '/tenon.css';
    $page['page_bottom']['#attached']['js'][] = drupal_get_path('module', 'tenon') . '/tenon.js';
  }
}

/**
 * Implements hook_libraries_info().
 */
function tenon_libraries_info() {
  return array(
    'hopscotch' => array(
      'name' => t('Hopscotch'),
      'vendor url' => 'http://linkedin.github.io/hopscotch/',
      'download url' => 'https://github.com/linkedin/hopscotch',
      'version callback' => 'tenon_get_hopscotch_version',
      'files' => array(
        'js' => array('js/hopscotch-0.1.2.min.js'),
        'css' => array('css/hopscotch-0.1.2.min.css'),
      ),
      'variants' => array(
        'minified' => array(
          'files' => array(
            'js' => array(
              'js/hopscotch-0.1.2.min.js',
            ),
            'css' => array(
              'css/hopscotch-0.1.2.min.css',
            ),
          ),
        ),
        'source' => array(
          'files' => array(
            'js' => array(
              'js/hopscotch-0.1.2.js',
            ),
            'css' => array(
              'css/hopscotch-0.1.2.css',
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Helper to get the library version.
 */
function tenon_get_hopscotch_version($library) {
  // Since the library doesn't store its version, we need to explicitly
  // return its value.
  return '0.1.2';
}
